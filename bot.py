import telebot
from telebot import types
import json
import os
import random
import time
from functools import wraps
from config import ADMIN_ID, TOKEN, REF_REWARD, CHANNELS
import config
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo

bot = telebot.TeleBot(TOKEN)

DATA_FILE = 'users.json'
CASE_COST = 25

case_items = [
    ("–ú–∏—à–∫–∞", 45),
    ("–†–æ–∑–∞", 45),
    ("–†–∞–∫–µ—Ç–∞", 9.8),
    ("–ö–æ–ª—å—Ü–æ", 0.2),
]
premium_case_items = [
    ("–†–∞–∫–µ—Ç–∞", 60),
    ("–ö–æ–ª—å—Ü–æ", 39),
    ("NFT", 1),
]

free_case_items = [
    ("–ó–≤–µ–∑–¥—ã", 100),  # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî —Å–∞–º–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –æ—Ç 0.1 –¥–æ 2
]

def is_subscribed(user_id):
    for ch in CHANNELS:
        try:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–Ω–æ –ø–æ internal chat_id
            member = bot.get_chat_member(ch['id'], user_id)
            # —Å—Ç–∞—Ç—É—Å ‚Äúleft‚Äù –∏–ª–∏ ‚Äúkicked‚Äù ‚Äî –∑–Ω–∞—á–∏—Ç –æ—Ç–ø–∏—Å–∞–Ω
            if member.status in ['left', 'kicked']:
                return False
        except Exception as e:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ {ch['id']}: {e}")
            return False
    return True




PROMO_FILE = 'promo.json'


def load_promos():
    if not os.path.exists(PROMO_FILE):
        with open(PROMO_FILE, 'w') as f:
            json.dump({}, f)
    with open(PROMO_FILE, 'r') as f:
        return json.load(f)

def save_promos(promos):
    with open(PROMO_FILE, 'w') as f:
        json.dump(promos, f, indent=2)


def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w') as f:
            json.dump({}, f)
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å", "‚≠ê –ë–∞–ª–∞–Ω—Å")
    markup.row("üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
    markup.row("üí∏ –í—ã–≤–µ—Å—Ç–∏")
    return markup



def ensure_user_and_subscription(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        data = load_data()
        user_id = str(message.from_user.id)

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –¥–æ–±–∞–≤–∏–º –µ–≥–æ
        if user_id not in data:
            data[user_id] = {
                'balance': 0,
                'ref_by': None,
                'ref_bonus': False,
                'refs': [],
                'pending': []
            }
            save_data(data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not is_subscribed(message.from_user.id):
            bot.send_message(message.chat.id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!", reply_markup=get_subscribe_markup())
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        return func(message, *args, **kwargs)
    return wrapper






def get_subscribe_markup():
    markup = types.InlineKeyboardMarkup()
    for ch in CHANNELS:
        markup.add(types.InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://{ch['link']}" ))
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    return markup
@ensure_user_and_subscription
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    data = load_data()

    referrer_id = None
    if len(message.text.split()) > 1:
        referrer_id = message.text.split()[1]

    if user_id not in data:
        data[user_id] = {
            'balance': 0,
            'ref_by': referrer_id if referrer_id != user_id else None,
            'ref_bonus': False,
            'refs': [],
            'pending': []
        }

        if referrer_id and referrer_id in data:
            if user_id not in data[referrer_id]['pending']:
                data[referrer_id]['pending'].append(user_id)

        save_data(data)  # <-- –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º


    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "üëã –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:", reply_markup=get_subscribe_markup())
    else:
        # <- –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–æ–Ω—É—Å–∞
        ref_by = data[user_id].get('ref_by')
        if ref_by and ref_by in data:
            ref_data = data[ref_by]

            # –ï—Å–ª–∏ –±—ã–ª –≤ pending ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ refs
            if user_id in ref_data.get('pending', []):
                ref_data['pending'].remove(user_id)
                if user_id not in ref_data['refs']:
                    ref_data['refs'].append(user_id)

            # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º
            if user_id in ref_data.get('refs', []) and not data[user_id].get('ref_bonus'):
                ref_data['balance'] += REF_REWARD
                data[user_id]['ref_bonus'] = True
                bot.send_message(int(ref_by), f"üéâ –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REF_REWARD} ‚≠ê")

            save_data(data)

        bot.send_message(message.chat.id, "‚úÖ –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!", reply_markup=get_main_menu())


@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def check_subs(call):
    user_id = str(call.from_user.id)
    data = load_data()

    if is_subscribed(call.from_user.id):
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

        ref_by = data[user_id].get('ref_by')
        if ref_by and ref_by in data:
            ref_data = data[ref_by]
            if user_id in ref_data.get('pending', []):
                ref_data['pending'].remove(user_id)
                ref_data['refs'].append(user_id)
                ref_data['balance'] += REF_REWARD
                save_data(data)
                bot.send_message(int(ref_by), f"üéâ –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REF_REWARD} ‚≠ê")
        bot.send_message(call.message.chat.id, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")

@ensure_user_and_subscription
@bot.message_handler(func=lambda message: message.text == "‚≠ê –ë–∞–ª–∞–Ω—Å")
def show_balance(message):
    data = load_data()
    user_id = str(message.from_user.id)
    bal = data[user_id]['balance']
    bot.send_message(message.chat.id, f"–£ —Ç–µ–±—è {bal} –∑–≤—ë–∑–¥. –ó–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ @Kricocool")

@ensure_user_and_subscription
@bot.message_handler(func=lambda message: message.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å")
def choose_case(message):
    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "üëã –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:", reply_markup=get_subscribe_markup())
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üéÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç (25 ‚≠ê)", callback_data="case_standard"))
        markup.add(types.InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º (100 ‚≠ê)", callback_data="case_premium"))
        markup.add(types.InlineKeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π (—Ä–∞–∑ –≤ 24—á)", callback_data="case_free"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–µ–π—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("case_"))
def show_case_info(call):
    user_id = str(call.from_user.id)
    data = load_data()
    case_type = call.data.split("_")[1]

    if case_type == "standard":
        items = case_items
        cost = 25
    elif case_type == "premium":
        items = premium_case_items
        cost = 100
    elif case_type == "free":
        items = free_case_items
        cost = 0
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤
    if case_type != "free" and data[user_id]["balance"] < cost:
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –ù—É–∂–Ω–æ {cost} ‚≠ê.")
        return

    # –î–ª—è free ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if case_type == "free":
        last_open = data[user_id].get("last_free", 0)
        if time.time() - last_open < 86400:
            hours = int((86400 - (time.time() - last_open)) // 3600)
            minutes = int((86400 - (time.time() - last_open)) % 3600 // 60)
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, f"üïí –§—Ä–∏-–∫–µ–π—Å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.")
            return

    drop_list = "\n".join([f"‚Ä¢ {item} ‚Äî {chance}%" for item, chance in items])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üß® –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"open_{case_type}"))
    bot.edit_message_text(
        f"<b>{'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if case_type=='free' else case_type.capitalize()} –∫–µ–π—Å</b>\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚≠ê\n\n"
        f"–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:\n{drop_list}",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )



@bot.callback_query_handler(func=lambda call: call.data.startswith("open_"))
def open_selected_case(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    data = load_data()

    case_type = call.data.split("_")[1]

    if case_type == "standard":
        items = case_items
        cost = 25
    elif case_type == "premium":
        items = premium_case_items
        cost = 100
    elif case_type == "free":
        items = free_case_items
        cost = 0
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å —Ç–∏–ø–æ–º –∫–µ–π—Å–∞.")
        return

    if case_type != "free" and data[user_id]['balance'] < cost:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –ù—É–∂–Ω–æ {cost} ‚≠ê.")
        return

    if case_type == "free":
        last = data[user_id].get("last_free", 0)
        if time.time() - last < 86400:
            bot.answer_callback_query(call.id)
            bot.send_message(chat_id, "‚ùó –≠—Ç–æ—Ç –∫–µ–π—Å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.")
            return
        data[user_id]["last_free"] = time.time()

    else:
        data[user_id]['balance'] -= cost

    save_data(data)

    # "–ê–Ω–∏–º–∞—Ü–∏—è"
    msg = bot.send_message(chat_id, "üîì –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...")
    time.sleep(1)
    bot.edit_message_text("üü¶üü¶üü¶üü¶üü¶\nüéâ –ì–æ—Ç–æ–≤–æ!", chat_id, msg.message_id)

    # –†–æ–∑—ã–≥—Ä—ã—à
    roll = random.uniform(0, 100)
    cumulative = 0
    drop = None
    for item, chance in items:
        cumulative += chance
        if roll <= cumulative:
            drop = item
            break

    # –§—Ä–∏-–∫–µ–π—Å: –∑–≤—ë–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
    if case_type == "free":
        stars = round(random.uniform(0.1, 2), 2)
        data[user_id]['balance'] += stars
        save_data(data)
        bot.send_message(chat_id, f"üéâ –¢–µ–±–µ –≤—ã–ø–∞–ª–æ <b>{stars} ‚≠ê</b>!", parse_mode="HTML")
    else:
        user_display = f"@{call.from_user.username} (id:{call.from_user.id})" if call.from_user.username else f"id:{call.from_user.id}"
        bot.send_message(chat_id, f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª: <b>{drop}</b>!", parse_mode="HTML")
        bot.send_message(ADMIN_ID, f"üì¨ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n–î—Ä–æ–ø: {drop}")




@bot.message_handler(commands=['add'])
def add_balance(message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /add user_id —Å—É–º–º–∞")
        return
    uid, amount = parts[1], int(parts[2])
    data = load_data()
    if uid in data:
        data[uid]['balance'] += amount
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ {amount} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@ensure_user_and_subscription
@bot.message_handler(func=lambda msg: msg.text == "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
def partners(msg):
    user_id = str(msg.from_user.id)
    data = load_data()

    ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    refs = data[user_id].get('refs', [])
    ref_by = data[user_id].get('ref_by')

    text = f"üë• <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
    text += f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>\n"
    text += f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(refs)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    text += f"üé≤–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {config.REF_REWARD}"

    if ref_by:
        ref_user = data.get(ref_by)
        if ref_user:
            text += f"üìå –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: "
            if ref_by in data:
                username = f"@{ref_by}"  # default
                if bot.get_chat(ref_by).username:
                    username = f"@{bot.get_chat(ref_by).username}"
                text += f"{username} (id:{ref_by})"
            else:
                text += f"id:{ref_by}"

    bot.send_message(msg.chat.id, text, parse_mode='HTML')

@bot.message_handler(commands=['refs'])
def refs_command(message):
    user_id = str(message.from_user.id)
    if len(message.text.strip().split()) > 1:
        user_id = message.text.strip().split()[1]

    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)

        if user_id not in users:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        refs = users[user_id].get("refs", [])

        if not refs:
            bot.send_message(message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
            return

        status_lines = []

        for ref_id in refs:
            all_ok = True
            for sponsor in config.CHANNELS:
                try:
                    member = bot.get_chat_member(sponsor["id"], ref_id)
                    if member.status in ["left", "kicked"]:
                        all_ok = False
                        break
                except Exception:
                    all_ok = False
                    break
            status = "‚úÖ" if all_ok else "‚ùå"
            status_lines.append(f"{ref_id} {status}")

        result = "\n".join(status_lines)
        bot.send_message(message.chat.id, f"–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{result}")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")




@ensure_user_and_subscription
@bot.message_handler(func=lambda message: message.text == "üîë –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
def ask_promo_code(message):
    bot.send_message(message.chat.id, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(message, handle_promo_code)

def handle_promo_code(message):
    promo = message.text.strip()
    user_id = str(message.from_user.id)

    if not os.path.exists("promo.json"):
        with open("promo.json", "w") as f:
            json.dump({}, f)

    with open("promo.json", "r") as f:
        promos = json.load(f)

    if promo not in promos:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    data = load_data()
    user_data = data.get(user_id)

    if not user_data:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if 'used_promos' not in user_data:
        user_data['used_promos'] = []

    if promo in user_data['used_promos']:
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        return

    promo_info = promos[promo]

    if promo_info['uses_left'] <= 0:
        bot.send_message(message.chat.id, "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    if user_data.get('referrals', 0) < promo_info['min_refs']:
        bot.send_message(
            message.chat.id,
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {promo_info['min_refs']}."
        )
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    user_data['balance'] += promo_info['reward']
    user_data['used_promos'].append(promo)
    promo_info['uses_left'] -= 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_data(data)
    with open("promo.json", "w") as f:
        json.dump(promos, f, indent=2)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ {promo_info['reward']} ‚≠ê"
    )



@bot.message_handler(commands=['addpromo'])
def add_promo(message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 5:
        bot.send_message(
            message.chat.id,
            "–ò—Å–ø–æ–ª—å–∑—É–π: /addpromo –∫–æ–¥ –∑–≤—ë–∑–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º–∏–Ω_—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–ü—Ä–∏–º–µ—Ä: /addpromo PROMO123 50 10 2"
        )
        return

    code = parts[1]
    reward = int(parts[2])
    uses_left = int(parts[3])
    min_refs = int(parts[4])

    if not os.path.exists("promo.json"):
        with open("promo.json", "w") as f:
            json.dump({}, f)

    with open("promo.json", "r") as f:
        promos = json.load(f)

    promos[code] = {
        "reward": reward,
        "uses_left": uses_left,
        "min_refs": min_refs
    }

    with open("promo.json", "w") as f:
        json.dump(promos, f, indent=2)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' –¥–æ–±–∞–≤–ª–µ–Ω: {reward} ‚≠ê, {uses_left} –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –º–∏–Ω–∏–º—É–º {min_refs} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    )

@bot.message_handler(commands=['dump'])
def dump_file(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open(DATA_FILE, 'rb') as f:
            bot.send_document(message.chat.id, f)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")



@bot.message_handler(commands=['reward'])
def change_ref_reward(message):
    if message.from_user.id != ADMIN_ID:
        return
    msg = bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {config.REF_REWARD}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    bot.register_next_step_handler(msg, set_new_ref_reward)

def set_new_ref_reward(message):
    try:
        new_reward = float(message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ config –º–æ–¥—É–ª–µ
        config.REF_REWARD = new_reward

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª config.py
        with open('config.py', 'r', encoding='utf-8') as f:
            lines = f.readlines()

        with open('config.py', 'w', encoding='utf-8') as f:
            for line in lines:
                if line.startswith('ref_reward'):
                    f.write(f'ref_reward = {new_reward}\n')
                else:
                    f.write(line)

        bot.send_message(message.chat.id, f"–ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_reward}")

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
















post_content = {}
awaiting_post = {}
awaiting_buttons = {}

@bot.message_handler(commands=['post'])
def start_posting(message):
    if message.from_user.id != ADMIN_ID:
        return
    msg = bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞):")
    awaiting_post[message.chat.id] = True
    bot.register_next_step_handler(msg, handle_post_content)

def handle_post_content(message):
    if message.chat.id not in awaiting_post:
        return
    post_content[message.chat.id] = message
    awaiting_post.pop(message.chat.id)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–∞", callback_data="add_buttons"),
               InlineKeyboardButton("–ù–µ—Ç", callback_data="no_buttons"))
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["add_buttons", "no_buttons"])
def process_button_choice(call):
    chat_id = call.message.chat.id
    if call.data == "add_buttons":
        awaiting_buttons[chat_id] = []
        msg = bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ + —Å—Å—ã–ª–∫–∞\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ `–ì–æ—Ç–æ–≤–æ`.")
        bot.register_next_step_handler(msg, collect_buttons)
    else:
        send_post(chat_id)

def collect_buttons(message):
    chat_id = message.chat.id
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        send_post(chat_id, with_buttons=True)
        return

    try:
        text, url = message.text.split('+')
        awaiting_buttons[chat_id].append(InlineKeyboardButton(text.strip(), url=url.strip()))
        msg = bot.send_message(chat_id, "–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `–ì–æ—Ç–æ–≤–æ`.")
        bot.register_next_step_handler(msg, collect_buttons)
    except:
        msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ + —Å—Å—ã–ª–∫–∞")
        bot.register_next_step_handler(msg, collect_buttons)

def send_post(chat_id, with_buttons=False):
    message = post_content.get(chat_id)
    keyboard = None

    if with_buttons and awaiting_buttons.get(chat_id):
        markup = InlineKeyboardMarkup()
        markup.add(*awaiting_buttons[chat_id])
        keyboard = markup

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with open("users.json", "r", encoding="utf-8") as f:
        users = json.load(f)

    for user_id in users:
        try:
            if message.content_type == 'text':
                bot.send_message(user_id, message.text, reply_markup=keyboard)
            elif message.content_type in ['photo', 'video']:
                media = message.photo[-1].file_id if message.content_type == 'photo' else message.video.file_id
                send_func = bot.send_photo if message.content_type == 'photo' else bot.send_video
                caption = message.caption if message.caption else ""
                send_func(user_id, media, caption=caption, reply_markup=keyboard)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    post_content.pop(chat_id, None)
    awaiting_buttons.pop(chat_id, None)
    bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")




@bot.message_handler(func=lambda message: message.text == 'üí∏ –í—ã–≤–µ—Å—Ç–∏')
def show_withdraw_options(message):
    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "üëã –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:", reply_markup=get_subscribe_markup())
    else:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton("25", callback_data="withdraw_25"),
            telebot.types.InlineKeyboardButton("50", callback_data="withdraw_50"),
            telebot.types.InlineKeyboardButton("100", callback_data="withdraw_100"),
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('withdraw_'))
def handle_withdraw(call):
    amount = int(call.data.split('_')[1])
    user_id = str(call.from_user.id)
    users = load_data()  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ users.json

    if user_id not in users:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    balance = users[user_id].get('balance', 0)

    if balance < amount:
        bot.answer_callback_query(call.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ {amount}. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    users[user_id]['balance'] = balance - amount
    save_data(users)  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json

    bot.answer_callback_query(call.id, f"–í—ã–≤–æ–¥ {amount} –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ã–≤–æ–¥ {amount}.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
    admin_msg = f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username or call.from_user.id}\nID: {user_id}\n–°—É–º–º–∞: {amount}"
    bot.send_message(ADMIN_ID, admin_msg)





bot.infinity_polling()
